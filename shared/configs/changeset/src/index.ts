import { existsSync, mkdirSync, readFileSync, writeFileSync } from 'node:fs';
import { dirname, join } from 'node:path';
import { fileURLToPath } from 'node:url';

const __dirname = dirname(fileURLToPath(import.meta.url));

export interface ChangesetInitOptions {
  cwd?: string;
  access?: 'public' | 'restricted';
  baseBranch?: string;
}

interface ChangesetConfig {
  access: 'public' | 'restricted';
  baseBranch: string;
  changelog?: string | Array<string> | false | [string, Record<string, unknown>];
  commit?: boolean;
  fixed?: Array<Array<string>>;
  linked?: Array<Array<string>>;
  updateInternalDependencies?: 'patch' | 'minor';
  ignore?: Array<string>;
}

interface PackageJson {
  scripts?: Record<string, string>;
  [key: string]: unknown;
}

export function initChangesets(options: ChangesetInitOptions = {}): void {
  const { cwd = process.cwd(), access = 'public', baseBranch = 'main' } = options;

  try {
    // Create .changeset directory
    const changesetDir = join(cwd, '.changeset');
    if (!existsSync(changesetDir)) {
      mkdirSync(changesetDir, { recursive: true });
    }

    // Copy default config
    const configSource = join(dirname(__dirname), 'config', 'config.json');
    const configTarget = join(changesetDir, 'config.json');

    if (!existsSync(configTarget)) {
      // Read and modify config based on options
      const configData = JSON.parse(readFileSync(configSource, 'utf8')) as ChangesetConfig;
      const config: ChangesetConfig = {
        ...configData,
        access,
        baseBranch,
      };

      writeFileSync(configTarget, `${JSON.stringify(config, null, 2)}\n`);
      console.log('✓ Created changeset config');
    }

    // Create README
    const readmePath = join(changesetDir, 'README.md');
    if (!existsSync(readmePath)) {
      const readmeContent = `# Changesets

Hello and welcome! This folder has been automatically generated by \`@changesets/cli\`, a build tool that works
with multi-package repos, or single-package repos to help you version and publish your code. You can
find the full documentation for it [in our repository](https://github.com/changesets/changesets)

We have a quick list of common questions to get you started engaging with this project in
[our documentation](https://github.com/changesets/changesets/blob/main/docs/common-questions.md)
`;
      writeFileSync(readmePath, readmeContent);
      console.log('✓ Created changeset README');
    }

    console.log('✓ Changesets initialized successfully');
  } catch (error) {
    console.error('Failed to initialize changesets:', error);
    throw error;
  }
}

export function addChangesetScripts(packageJsonPath?: string): void {
  const pkgPath = packageJsonPath || join(process.cwd(), 'package.json');

  try {
    const pkg = JSON.parse(readFileSync(pkgPath, 'utf8')) as PackageJson;

    if (!pkg.scripts) {
      pkg.scripts = {};
    }

    const scripts = {
      changeset: 'changeset',
      'changeset:version': 'changeset version',
      'changeset:publish': 'changeset publish',
    };

    let added = false;
    for (const [name, command] of Object.entries(scripts)) {
      if (!pkg.scripts[name]) {
        pkg.scripts[name] = command;
        added = true;
      }
    }

    if (added) {
      writeFileSync(pkgPath, `${JSON.stringify(pkg, null, 2)}\n`);
      console.log('✓ Added changeset scripts to package.json');
    } else {
      console.log('ℹ Changeset scripts already exist');
    }
  } catch (error) {
    console.error('Failed to add changeset scripts:', error);
    throw error;
  }
}
