/**
 * DevContainer configuration generator
 */

import type { DevContainerConfig } from '../types/index.js';
import { getImageForFormatters } from '../utils/devcontainer.js';

/**
 * Generate devcontainer.json configuration
 */
export function generateDevContainerConfig(formatters: {
  prettier: boolean;
  biome: boolean;
  remark: boolean;
  eslint: boolean;
}): DevContainerConfig {
  const features: Record<string, Record<string, any>> = {};
  const extensions: Array<string> = [];
  const settings: Record<string, any> = {};

  // Add formatter-specific features
  if (formatters.prettier) {
    extensions.push('esbenp.prettier-vscode');
    settings['editor.defaultFormatter'] = 'esbenp.prettier-vscode';
    settings['editor.formatOnSave'] = true;
  }

  if (formatters.biome) {
    features['ghcr.io/devcontainers-contrib/features/biome:1'] = {};
    extensions.push('biomejs.biome');

    // Set Biome as default for supported languages
    const biomeLanguages = ['javascript', 'typescript', 'json', 'jsonc'];
    for (const lang of biomeLanguages) {
      settings[`[${lang}]`] = {
        'editor.defaultFormatter': 'biomejs.biome',
      };
    }
  }

  if (formatters.remark) {
    // Node.js feature includes npm which has remark-cli
    features['ghcr.io/devcontainers/features/node:1'] = {
      version: 'lts',
    };
    extensions.push('unifiedjs.vscode-remark');
    settings['[markdown]'] = {
      'editor.defaultFormatter': 'unifiedjs.vscode-remark',
    };
  }

  if (formatters.eslint) {
    extensions.push('dbaeumer.vscode-eslint');
    settings['eslint.validate'] = [
      'javascript',
      'javascriptreact',
      'typescript',
      'typescriptreact',
    ];
    settings['editor.codeActionsOnSave'] = {
      ...settings['editor.codeActionsOnSave'],
      'source.fixAll.eslint': 'explicit',
    };
  }

  // Add common extensions
  extensions.push('editorconfig.editorconfig', 'davidanson.vscode-markdownlint');

  // Base devcontainer configuration
  const config: DevContainerConfig = {
    name: 'Outfitter Development',
    image: getImageForFormatters(formatters),
    features,
    customizations: {
      vscode: {
        extensions,
        settings: {
          ...settings,
          'editor.formatOnSave': true,
          'editor.codeActionsOnSave': {
            'source.fixAll': 'explicit',
          },
          'files.trimTrailingWhitespace': true,
          'files.insertFinalNewline': true,
          'files.trimFinalNewlines': true,
        },
      },
    },
    postCreateCommand: 'npm install -g @outfitter/formatting',
    remoteUser: 'node',
  };

  // Add mounts for formatter configs
  const mounts: Array<string> = [];
  if (formatters.prettier) {
    mounts.push(
      'source=${localWorkspaceFolder}/.prettierrc.yaml,target=/workspace/.prettierrc.yaml,type=bind,consistency=cached',
    );
  }
  if (formatters.biome) {
    mounts.push(
      'source=${localWorkspaceFolder}/biome.jsonc,target=/workspace/biome.jsonc,type=bind,consistency=cached',
    );
  }
  if (formatters.remark) {
    mounts.push(
      'source=${localWorkspaceFolder}/.remarkrc.yaml,target=/workspace/.remarkrc.yaml,type=bind,consistency=cached',
    );
  }

  if (mounts.length > 0) {
    config.mounts = mounts;
  }

  return config;
}

/**
 * Generate devcontainer.json content as string
 */
export function formatDevContainerConfig(config: DevContainerConfig): string {
  const lines = [
    '// Generated by @outfitter/formatting',
    '// For format details, see https://aka.ms/devcontainer.json',
    JSON.stringify(config, null, 2),
  ];

  return lines.join('\n');
}
