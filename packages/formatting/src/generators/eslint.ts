/**
 * ESLint configuration generator
 */

import { generate as generateEslintConfig } from '@outfitter/eslint-config';
import type { PresetConfig, GeneratedConfig } from '../types/index.js';
import type { Result } from '@outfitter/contracts';
import { success, failure, makeError } from '@outfitter/contracts';
import { mergeRawConfig, type YamlPreset } from '../utils/yaml-presets.js';

/**
 * Generate ESLint configuration file
 */
export function generateEslintConfigFile(
  preset: PresetConfig,
  yamlPreset?: YamlPreset,
): Result<GeneratedConfig, Error> {
  try {
    // Map preset strictness to ESLint config options
    const eslintOptions = {
      typescript: true,
      react: true,
      node: true,
      imports: true,
      accessibility: true,
      strictness: preset.name as 'relaxed' | 'standard' | 'strict',
    };

    let config = generateEslintConfig(eslintOptions);

    // Apply raw overrides from YAML preset if available
    if (yamlPreset?.raw?.eslint) {
      config = mergeRawConfig(config, yamlPreset.raw.eslint);
    }

    // Generate as .eslintrc.js for legacy compatibility
    const header = `// Generated by @outfitter/formatting\n// Tool: eslint\n// Preset: ${preset.name}\n// Documentation: https://eslint.org/docs/latest/use/configure/\n\n`;
    const content = `${header}module.exports = ${JSON.stringify(config, null, 2)};\n`;

    return success({
      path: '.eslintrc.js',
      content,
      formatter: 'prettier', // Use Prettier to format JS files
      generated: true,
    });
  } catch (error) {
    return failure(
      makeError('INTERNAL_ERROR', 'Failed to generate ESLint configuration', { cause: error }),
    );
  }
}

/**
 * Get ESLint-specific package.json scripts
 */
export function getEslintScripts(): Record<string, string> {
  return {
    lint: 'eslint .',
    'lint:fix': 'eslint . --fix',
  };
}
