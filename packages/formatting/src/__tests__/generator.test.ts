import { describe, it, expect } from 'vitest';
import { generateFormatterConfig, generatePackageJsonScripts } from '../core/generator.js';
import { standard } from '../core/presets.js';
import type { FormatterType } from '../types/index.js';

describe('generator', () => {
  describe('generateFormatterConfig', () => {
    it('should generate prettier config', async () => {
      const result = await generateFormatterConfig('prettier', standard);

      if (!result.success) {
        console.error('Failed to generate prettier config:', result.error);
      }
      expect(result.success).toBe(true);
      if (result.success) {
        expect(result.data.path).toBe('.prettierrc.yaml');
        expect(result.data.formatter).toBe('prettier');
        expect(result.data.generated).toBe(true);
        expect(result.data.content).toContain('Generated by @outfitter/formatting');
        expect(result.data.content).toContain('Preset: standard');
        expect(result.data.content).toContain('printWidth: 80');
      }
    });

    it('should generate biome config', async () => {
      const result = await generateFormatterConfig('biome', standard);

      expect(result.success).toBe(true);
      if (result.success) {
        expect(result.data.path).toBe('biome.jsonc');
        expect(result.data.formatter).toBe('biome');
        expect(result.data.generated).toBe(true);
        expect(result.data.content).toContain('"lineWidth": 80');
        expect(result.data.content).toContain('"quoteStyle": "single"');
      }
    });

    it('should generate remark config', async () => {
      const result = await generateFormatterConfig('remark', standard);

      expect(result.success).toBe(true);
      if (result.success) {
        expect(result.data.path).toBe('.remarkrc.yaml');
        expect(result.data.formatter).toBe('remark');
        expect(result.data.generated).toBe(true);
        expect(result.data.content).toContain('Generated by @outfitter/formatting');
        expect(result.data.content).toContain('Preset: standard');
        expect(result.data.content).toContain('plugins:');
      }
    });

    it('should fail for unknown formatter', async () => {
      const result = await generateFormatterConfig('unknown' as FormatterType, standard);

      expect(result.success).toBe(false);
      if (!result.success) {
        expect(result.error.code).toBe('VALIDATION_ERROR');
      }
    });
  });

  describe('generatePackageJsonScripts', () => {
    it('should generate scripts for single formatter', () => {
      const scripts = generatePackageJsonScripts(['prettier']);

      expect(scripts).toEqual({
        'format:prettier': 'prettier --write .',
        'format:prettier:check': 'prettier --check .',
        format: 'prettier --write .',
        'format:check': 'prettier --check .',
      });
    });

    it('should generate scripts for multiple formatters', () => {
      const scripts = generatePackageJsonScripts(['prettier', 'biome']);

      expect(scripts).toMatchObject({
        'format:prettier': 'prettier --write .',
        'format:prettier:check': 'prettier --check .',
        'format:biome': 'biome format --write .',
        'format:biome:check': 'biome format .',
        'lint:biome': 'biome lint .',
        'lint:biome:fix': 'biome lint --write .',
        format: 'pnpm format:prettier && pnpm format:biome',
        'format:check': 'pnpm format:prettier:check && pnpm format:biome:check',
      });
    });

    it('should generate biome lint scripts', () => {
      const scripts = generatePackageJsonScripts(['biome']);

      expect(scripts).toMatchObject({
        'format:biome': 'biome format --write .',
        'format:biome:check': 'biome format .',
        'lint:biome': 'biome lint .',
        'lint:biome:fix': 'biome lint --write .',
        format: 'biome format --write .',
        'format:check': 'biome format .',
        lint: 'biome lint .',
        'lint:fix': 'biome lint --write .',
      });
    });

    it('should generate remark scripts', () => {
      const scripts = generatePackageJsonScripts(['remark']);

      expect(scripts).toEqual({
        'format:markdown': 'remark . --output',
        'format:markdown:check': 'remark . --frail',
        format: 'remark . --output',
        'format:check': 'remark . --frail',
      });
    });

    it('should handle empty formatters array', () => {
      const scripts = generatePackageJsonScripts([]);

      expect(scripts).toEqual({});
    });
  });
});
