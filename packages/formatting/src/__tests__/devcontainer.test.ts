import { describe, it, expect } from 'vitest';
import {
  generateDevContainerConfig,
  formatDevContainerConfig,
} from '../generators/devcontainer.js';
import type { FormatterDetection } from '../types/index.js';

describe('DevContainer Generator', () => {
  describe('generateDevContainerConfig', () => {
    it('should generate config for all formatters', () => {
      const formatters: FormatterDetection = {
        prettier: true,
        biome: true,
        remark: true,
      };

      const config = generateDevContainerConfig(formatters, 'standard');

      expect(config).toMatchObject({
        name: 'Outfitter Development',
        image: expect.stringContaining('javascript-node'),
        features: {
          'ghcr.io/devcontainers-contrib/features/biome:1': {},
          'ghcr.io/devcontainers/features/node:1': {
            version: 'lts',
          },
        },
        customizations: {
          vscode: {
            extensions: expect.arrayContaining([
              'esbenp.prettier-vscode',
              'biomejs.biome',
              'unifiedjs.vscode-remark',
              'editorconfig.editorconfig',
            ]),
            settings: expect.objectContaining({
              'editor.formatOnSave': true,
              '[markdown]': {
                'editor.defaultFormatter': 'unifiedjs.vscode-remark',
              },
            }),
          },
        },
      });
    });

    it('should handle Biome-only configuration', () => {
      const formatters: FormatterDetection = {
        prettier: false,
        biome: true,
        remark: false,
      };

      const config = generateDevContainerConfig(formatters);

      expect(config.image).toContain('base:bullseye');
      expect(config.features).toHaveProperty('ghcr.io/devcontainers-contrib/features/biome:1');
      expect(config.features).not.toHaveProperty('ghcr.io/devcontainers/features/node:1');
    });

    it('should handle Prettier and Remark configuration', () => {
      const formatters: FormatterDetection = {
        prettier: true,
        biome: false,
        remark: true,
      };

      const config = generateDevContainerConfig(formatters);

      expect(config.image).toContain('javascript-node');
      expect(config.features).toHaveProperty('ghcr.io/devcontainers/features/node:1');
      expect(config.features).not.toHaveProperty('ghcr.io/devcontainers-contrib/features/biome:1');
    });

    it('should set correct formatter defaults for each language', () => {
      const formatters: FormatterDetection = {
        prettier: true,
        biome: true,
        remark: true,
      };

      const config = generateDevContainerConfig(formatters);
      const settings = config.customizations?.vscode?.settings;

      expect(settings).toMatchObject({
        '[javascript]': { 'editor.defaultFormatter': 'biomejs.biome' },
        '[typescript]': { 'editor.defaultFormatter': 'biomejs.biome' },
        '[json]': { 'editor.defaultFormatter': 'biomejs.biome' },
        '[jsonc]': { 'editor.defaultFormatter': 'biomejs.biome' },
        '[markdown]': { 'editor.defaultFormatter': 'unifiedjs.vscode-remark' },
      });
    });

    it('should add config file mounts', () => {
      const formatters: FormatterDetection = {
        prettier: true,
        biome: true,
        remark: true,
      };

      const config = generateDevContainerConfig(formatters);

      expect(config.mounts).toEqual([
        'source=${localWorkspaceFolder}/.prettierrc.yaml,target=/workspace/.prettierrc.yaml,type=bind,consistency=cached',
        'source=${localWorkspaceFolder}/biome.jsonc,target=/workspace/biome.jsonc,type=bind,consistency=cached',
        'source=${localWorkspaceFolder}/.remarkrc.yaml,target=/workspace/.remarkrc.yaml,type=bind,consistency=cached',
      ]);
    });
  });

  describe('formatDevContainerConfig', () => {
    it('should format config as JSON with header comment', () => {
      const config = {
        name: 'Test',
        image: 'test-image',
      };

      const formatted = formatDevContainerConfig(config);

      expect(formatted).toContain('// Generated by @outfitter/formatting');
      expect(formatted).toContain('// For format details');
      expect(formatted).toContain('"name": "Test"');
      expect(formatted).toContain('"image": "test-image"');
    });
  });
});
